[{"layout":"post","title":"Setting up your first Mastodon server","date":"2017-08-22T15:49:41.000Z","comments":true,"categories":[],"content":"<p>Mastodon is a relatively young social network that aims to be a privacy concious, federated Twitter. Most people opt to join one of the larger servers (<a href=\"http://tooter.today\">tooter.today</a> can help find one if you want) but you and I are not most people. We like our privacy and our self hosted services, so, we’re going to setup a personal Mastodon server that ticks off all the boxes:</p>\n<ul>\n<li>Single user</li>\n<li>SSL protected</li>\n<li>Email ready</li>\n</ul>\n<p>This guide assumes some basic knowledge of Linux and DNS, but I’ll try to be as descriptive as possible for people who are going into this blind. If you have any questions feel free to contact me!</p>\n<h2>Setting up a VPS</h2>\n<p>Here I’m going to use Digital Ocean’s $10 Droplet, but feel free to substitute it with whever VPS provider you would like as long as the server you choose includes <em>at least</em> 1 GB of RAM. Thankfully, Digital Ocean provides “One-click Apps” which has decent defaults out of the box for various apps. For us, we’ll select one that has Docker built in on top of Ubuntu 16.04 LTS to speed things up but you can follow <a href=\"https://docs.docker.com/compose/install/\">the official docs</a> to get yourself up and going on other VPS providers. Just be sure to install both Docker and docker-compose as we’ll be using them throughout this guide.</p>\n<p>When configuring your server, ignore block storage and choose the region closest to you (<a href=\"https://cloudharmony.com/speedtest-for-digitalocean:compute\">Cloudharmony</a> can help you figure out shortest ping times if you want to get super precise). For additional options you can choose to backup your server if you’re interested in the additional security and cost, but be certain to choose IPV6 and Monitoring as they’re free and easy upgrades that will provide a lot of value. I also recommend adding an SSH key (<a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets\">Digital Ocean’s official docs</a> explain how to set up your SSH keys really well) but that’s up to you.</p>\n<h2>Domain</h2>\n<p>For starting up your own server, you’ll also need a domain to call your own. Just like email, Mastodon servers identify you by a username at a particular domain. If you don’t have one already, I recommend <a href=\"http://Hover.com\">Hover.com</a> (here’s my <a href=\"https://hover.com/ZY6RVTkV\">referral link</a>) but feel free to use whatever you’re comfortable with. Sign up for an account, purchase your domain and go into your domain’s DNS settings. For your Mastodon server you’ll need two domains:</p>\n<ul>\n<li>The main domain that you’ll access your server from\n<ul>\n<li>Presumably this will either be at the actual purchased domain aka <a href=\"https://mymastodonserver.com\">https://mymastodonserver.com</a> or a subdomain like <a href=\"https://social.mymastodonserver.com\">https://social.mymastodonserver.com</a></li>\n</ul>\n</li>\n<li>The access point for Mastodon’s streaming server\n<ul>\n<li>Presumably at <a href=\"https://streaming.mymastodonserver.com\">https://streaming.mymastodonserver.com</a></li>\n</ul>\n</li>\n</ul>\n<p>For each of these domains you’ll need:</p>\n<ul>\n<li>A Record pointing to the IPV4 IP Address of your VPS server</li>\n<li>AAAA Record pointing to the IPV6 IP Address of your VPS server</li>\n</ul>\n<p>Set those up in your console and we can confirm that this is fully functional once your server is up and running.</p>\n<h2>Email over SMTP</h2>\n<p>Mastodon has built in support for SMTP so that you can get emails when you signup and for other activity on your server. This isn’t strictly necessary, but is a good practice to do especially if you want to eventually open up your server to others. If you don’t have your own SMTP service, I recommend <a href=\"https://mailgun.com\">Mailgun</a>. After signing up, they will guide you through setting up your SMTP service and link it with your domain provider so you can send emails from your domain name. If you don’t end up using this, I’ll point out below where you might do something a bit different.</p>\n<h2>Setup your VPS</h2>\n<p>Now we’ll actually get going with the Mastodon specific parts of this guide. First we’ll SSH into our server and clone down the Mastodon repository from Github.</p>\n<pre><code class=\"language-sh\">ssh root@<span class=\"hljs-tag\">&lt;your ip address here&gt;</span>\ngit <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">https</span>://github.com/tootsuite/mastodon.git\ncd mastodon\n</code></pre>\n<p>To ensure we’re working with stable code, we’ll use git to checkout the latest release of the code. As of this writing, the latest release is v1.1.2 but you can find the latest on <a href=\"https://github.com/tootsuite/mastodon/releases\">Mastodon’s release page</a>.</p>\n<pre><code class=\"language-sh\"><span class=\"hljs-selector-tag\">git</span> <span class=\"hljs-selector-tag\">checkout</span> <span class=\"hljs-selector-tag\">v1</span><span class=\"hljs-selector-class\">.5</span><span class=\"hljs-selector-class\">.1</span>\n</code></pre>\n<p>You can also just run off of the latest code from Github, but be prepared for unstable behavior and contributing back on Github with bug reports and/or code.</p>\n<h2>Configure Mastodon</h2>\n<p>The primary method of configuring Mastodon is through environment variables. Thankfully, we can get this done automatically for us via a .env file and Mastodon provides some sane template files for us to go off of. First, we’ll copy the existing template to work off of and edit the file. You’ll likely have a choice between vim and nano and nano is a great one for beginners</p>\n<pre><code class=\"language-sh\">cp <span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.production</span><span class=\"hljs-selector-class\">.sample</span> <span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.production</span>\nnano <span class=\"hljs-selector-class\">.env</span><span class=\"hljs-selector-class\">.production</span>\n</code></pre>\n<p>Let’s break down this file into the specific parts that you should edit.</p>\n<ol>\n<li>Ignore the REDIS and DB env variables</li>\n</ol>\n<p>These are some relatively sane defaults out of the box so we won’t touch the database or Redis configuration for now.</p>\n<pre><code><span class=\"hljs-comment\"># Service dependencies</span>\n<span class=\"hljs-attr\">REDIS_HOST</span>=redis\n<span class=\"hljs-attr\">REDIS_PORT</span>=<span class=\"hljs-number\">6379</span>\n<span class=\"hljs-attr\">DB_HOST</span>=db\n<span class=\"hljs-attr\">DB_USER</span>=postgres\n<span class=\"hljs-attr\">DB_NAME</span>=postgres\n<span class=\"hljs-attr\">DB_PASS</span>=\n<span class=\"hljs-attr\">DB_PORT</span>=<span class=\"hljs-number\">5432</span>\n</code></pre>\n<ol start=\"2\">\n<li>Edit LOCAL_DOMAIN</li>\n</ol>\n<p>Here we’ll fill in the main domain name for your Mastodon server, which will probably be something like <a href=\"https://mymastodonserver.com\">https://mymastodonserver.com</a> or <a href=\"https://social.mymastodonserver.com\">https://social.mymastodonserver.com</a></p>\n<pre><code><span class=\"hljs-comment\"># Federation</span>\n<span class=\"hljs-attr\">LOCAL_DOMAIN</span>=&lt;Your domain here&gt;\n<span class=\"hljs-attr\">LOCAL_HTTPS</span>=<span class=\"hljs-literal\">true</span>\n</code></pre>\n<ol start=\"3\">\n<li>Generate app secrets</li>\n</ol>\n<p>We’ll generate some secrets so that Mastodon can properly encrypt our communications. Run <code>docker-compose run --rm web rake secret</code> three times and fill in each of the application secret fields with a generated secret</p>\n<pre><code><span class=\"hljs-comment\"># Application secrets</span>\n<span class=\"hljs-attr\">PAPERCLIP_SECRET</span>=firstgeneratedsecrethere\n<span class=\"hljs-attr\">SECRET_KEY_BASE</span>=secondgeneratedsecrethere\n<span class=\"hljs-attr\">OTP_SECRET</span>=thirdgeneratedsecrethere\n</code></pre>\n<p>Follow this with generating your VAPID keys for push notifications using <code>docker-compose run --rm web rake mastodon:webpush:generate_vapid_key</code></p>\n<pre><code><span class=\"hljs-attr\">VAPID_PRIVATE_KEY</span>=privatekey\n<span class=\"hljs-attr\">VAPID_PUBLIC_KEY</span>=publickey\n</code></pre>\n<ol start=\"4\">\n<li>Ignore SINGLE_USER_MODE</li>\n</ol>\n<p>This variable turns your server into Single User Mode which disables signups and causes everyone who visits your site to go automatically to your profile. We’ll want this but only after we’ve created an account.</p>\n<pre><code><span class=\"hljs-meta\"># Registrations</span>\n<span class=\"hljs-meta\"># Single user mode will disable registrations and redirect frontpage to the first profile</span>\n<span class=\"hljs-meta\"># We will uncomment this once our user is created</span>\n<span class=\"hljs-meta\">#SINGLE_USER_MODE=true</span>\n</code></pre>\n<ol start=\"5\">\n<li>Email</li>\n</ol>\n<p>If you have an SMTP server (such as the Mailgun account you might have created earlier) then fill this out with your account information. If you don’t, leave these unchanged.</p>\n<pre><code><span class=\"hljs-comment\"># E-mail configuration</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">Note:</span> Mailgun and SparkPost (https://sparkpo.st/smtp) each have good free tiers</span>\n<span class=\"hljs-attr\">SMTP_SERVER</span>=smtp.mailgun.org\n<span class=\"hljs-attr\">SMTP_PORT</span>=<span class=\"hljs-number\">587</span>\n<span class=\"hljs-attr\">SMTP_LOGIN</span>=&lt;Your Login here&gt;\n<span class=\"hljs-attr\">SMTP_PASSWORD</span>=&lt;Your password here&gt;\n<span class=\"hljs-attr\">SMTP_FROM_ADDRESS</span>=notifications@example.com\n</code></pre>\n<ol start=\"6\">\n<li>Streaming API Domain</li>\n</ol>\n<p>Earlier you setup a subdomain for your Mastodon streaming API. Be sure to fill this field in with that domain with the https protocol. I personally encountered issues when I didn’t do this on my server but this is theoretically optional.</p>\n<pre><code>STREAMING_API_BASE_URL=<span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//&lt;your domain here&gt;</span>\n</code></pre>\n<p>If you are using nano, you can now save and exit the file by typing Ctrl + O to Save and Ctrl + X to exit.</p>\n<h2>Persist changes in Docker</h2>\n<p>By default anything in Docker’s filesystem that isn’t mounted on your main computer is deleted when Docker is stopped. To prevent data loss, uncomment the lines in your docker-compose.yml file that define the volumes for your db and redis containers will use.</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-keyword\">version</span>: <span class=\"hljs-string\">'3'</span>\nservice<span class=\"hljs-variable\">s:</span>\n\n  d<span class=\"hljs-variable\">b:</span>\n    restar<span class=\"hljs-variable\">t:</span> always\n    image: postgre<span class=\"hljs-variable\">s:alpine</span>\n    volume<span class=\"hljs-variable\">s:</span>\n      - ./postgre<span class=\"hljs-variable\">s:</span>/var/lib/postgresql/data\n\n  <span class=\"hljs-keyword\">redi</span><span class=\"hljs-variable\">s:</span>\n    restar<span class=\"hljs-variable\">t:</span> always\n    image: <span class=\"hljs-keyword\">redi</span><span class=\"hljs-variable\">s:alpine</span>\n    volume<span class=\"hljs-variable\">s:</span>\n      - ./<span class=\"hljs-keyword\">redi</span><span class=\"hljs-variable\">s:</span>/data\n</code></pre>\n<h2>Add nginx</h2>\n<p>By default Mastodon communicates on ports 3000 and 4000, which means that if the server was currently running and we visited our domain we would have to go to <a href=\"http://mymastodonserver.com:3000\">http://mymastodonserver.com:3000</a> in order to see anything. That’s rather annoying, so we’ll use a reverse proxy server to route traffic into each of our containers when we visit the appropriate domain. First we’ll setup the container that will do this for us</p>\n<p>Add the following lines to the end of your docker-compose file</p>\n<pre><code class=\"language-yaml\">  nginx-proxy:\n    image: jwilder/nginx-proxy:latest\n    container_name: nginx-proxy\n    ports:\n      -<span class=\"ruby\"> <span class=\"hljs-string\">\"443:443\"</span>\n</span>      -<span class=\"ruby\"> <span class=\"hljs-string\">\"80:80\"</span>\n</span>    volumes:\n      -<span class=\"ruby\"> /var/run/docker.<span class=\"hljs-symbol\">sock:</span>/tmp/docker.sock\n</span>      -<span class=\"ruby\"> /data/<span class=\"hljs-symbol\">certs:</span>/etc/nginx/<span class=\"hljs-symbol\">certs:</span>ro\n</span>      -<span class=\"ruby\"> /data/config/nginx-proxy/html/<span class=\"hljs-symbol\">:/usr/share/nginx/html</span>\n</span>      -<span class=\"ruby\"> /data/config/nginx-proxy/vhost.d/<span class=\"hljs-symbol\">:/etc/nginx/vhost</span>.d\n</span>      -<span class=\"ruby\"> /data/config/nginx-proxy/conf.d/<span class=\"hljs-symbol\">:/etc/nginx/conf</span>.d\n</span>    restart: always\n    environment:\n      -<span class=\"ruby\"> ENABLE_IPV6=<span class=\"hljs-literal\">true</span>\n</span></code></pre>\n<p>This container will look at the other containers we have setup and utilize environment variables that have been defined to properly determine where to route traffic. We could do that in the .env.production file but I would rather keep all of the configuration for Docker in our docker-compose.yml file. Before that, we’ll change the web container to only expose port 3000 instead of opening that port to the outside world.</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-symbol\">  web:</span>\n<span class=\"hljs-symbol\">    restart:</span> always\n<span class=\"hljs-symbol\">    build:</span> .\n<span class=\"hljs-symbol\">    env_file:</span> .env.production\n<span class=\"hljs-symbol\">    command:</span> bundle exec rails s -p <span class=\"hljs-number\">3000</span> -b <span class=\"hljs-string\">'0.0.0.0'</span>\n<span class=\"hljs-symbol\">    expose:</span>\n      - <span class=\"hljs-string\">\"3000\"</span>\n<span class=\"hljs-symbol\">    depends_on:</span>\n      - db\n      - redis\n<span class=\"hljs-symbol\">    volumes:</span>\n      - .<span class=\"hljs-regexp\">/public/</span><span class=\"hljs-string\">assets:</span><span class=\"hljs-regexp\">/mastodon/</span><span class=\"hljs-keyword\">public</span>/assets\n      - .<span class=\"hljs-regexp\">/public/</span><span class=\"hljs-string\">packs:</span><span class=\"hljs-regexp\">/mastodon/</span><span class=\"hljs-keyword\">public</span>/packs\n      - .<span class=\"hljs-regexp\">/public/</span><span class=\"hljs-string\">system:</span><span class=\"hljs-regexp\">/mastodon/</span><span class=\"hljs-keyword\">public</span>/system\n</code></pre>\n<p>Then we’ll add the environment variables on the web and streaming containers so Nginx knows where the route internet traffic. Add a <code>environment</code> config to each container with the variables <code>VIRTUAL_HOST</code> defined. In this example we’ll also define the optional environment variable <code>VIRTUAL_PORT</code> that points to the exposed port on each container.</p>\n<pre><code class=\"language-yaml\">  web:\n    restart: always\n    build: .\n    env_file: .env.production\n    command: bundle exec rails s -p 3000 -b '0.0.0.0'\n    environment:\n      -<span class=\"ruby\"> VIRTUAL_HOST=&lt;your main mastodon server domain name&gt;\n</span>      -<span class=\"ruby\"> VIRTUAL_PORT=<span class=\"hljs-number\">3000</span>\n</span>    expose:\n      -<span class=\"ruby\"> <span class=\"hljs-string\">\"3000\"</span>\n</span>    depends_on:\n      -<span class=\"ruby\"> db\n</span>      -<span class=\"ruby\"> redis\n</span>    volumes:\n      -<span class=\"ruby\"> ./public/<span class=\"hljs-symbol\">assets:</span>/mastodon/public/assets\n</span>      -<span class=\"ruby\"> ./public/<span class=\"hljs-symbol\">packs:</span>/mastodon/public/packs\n</span>      -<span class=\"ruby\"> ./public/<span class=\"hljs-symbol\">system:</span>/mastodon/public/system\n</span>\n  streaming:\n    restart: always\n    build: .\n    env_file: .env.production\n    command: npm run start\n    environment:\n      -<span class=\"ruby\"> VIRTUAL_HOST=&lt;your streaming server domain name&gt;\n</span>      -<span class=\"ruby\"> VIRTUAL_PORT=<span class=\"hljs-number\">4000</span>\n</span>    ports:\n      -<span class=\"ruby\"> <span class=\"hljs-string\">\"4000:4000\"</span>\n</span>    depends_on:\n      -<span class=\"ruby\"> db\n</span>      -<span class=\"ruby\"> redis\n</span></code></pre>\n<p>At this point, if we were to launch the servers we would be able to view them at <a href=\"http://mymastodonserver.com\">http://mymastodonserver.com</a>. Unfortunately we would not be able to view them using https because we don’t have a certificate to encrypt traffic. Since we don’t want people spying on our server, we’ll do that next.</p>\n<h2>Add SSL</h2>\n<p>Let’s Encrypt is a free and automatic way to get SSL certificates and just like Nginx there’s a container that will handle this automatically for us. Append the following lines to your docker-compose.yml file to create that container.</p>\n<pre><code class=\"language-yaml\">  <span class=\"hljs-symbol\">letsencrypt:</span>\n    <span class=\"hljs-symbol\">image:</span> jrcs/letsencrypt-nginx-proxy-companion\n    <span class=\"hljs-symbol\">container_name:</span> letsencrypt\n    <span class=\"hljs-symbol\">volumes_from:</span>\n      - nginx-proxy\n    <span class=\"hljs-symbol\">volumes:</span>\n      - <span class=\"hljs-regexp\">/var/run</span><span class=\"hljs-regexp\">/docker.sock:/var</span><span class=\"hljs-regexp\">/run/docker</span>.sock\n      - <span class=\"hljs-regexp\">/data/certs</span><span class=\"hljs-symbol\">:/etc/nginx/certs</span><span class=\"hljs-symbol\">:rw</span>\n</code></pre>\n<p>Just like the Nginx container, this utilizes environment variables to know which container is matched to which SSL certificate. Add the <code>LETSENCRYPT_HOST</code> and <code>LETSENCRYPT_EMAIL</code> variables to our environment block. <code>LETSENCRYPT_EMAIL</code> in this case refers to your personal email.</p>\n<pre><code class=\"language-yaml\">  web:\n    restart: always\n    build: .\n    env_file: .env.production\n    command: bundle exec rails s -p 3000 -b '0.0.0.0'\n    environment:\n      -<span class=\"ruby\"> VIRTUAL_HOST=&lt;your main mastodon server domain name&gt;\n</span>      -<span class=\"ruby\"> VIRTUAL_PORT=<span class=\"hljs-number\">3000</span>\n</span>      -<span class=\"ruby\"> LETSENCRYPT_HOST=&lt;your main mastodon server domain name&gt;\n</span>      -<span class=\"ruby\"> LETSENCRYPT_EMAIL=&lt;your email&gt;\n</span>    expose:\n      -<span class=\"ruby\"> <span class=\"hljs-string\">\"3000\"</span>\n</span>    depends_on:\n      -<span class=\"ruby\"> db\n</span>      -<span class=\"ruby\"> redis\n</span>    volumes:\n      -<span class=\"ruby\"> ./public/<span class=\"hljs-symbol\">assets:</span>/mastodon/public/assets\n</span>      -<span class=\"ruby\"> ./public/<span class=\"hljs-symbol\">packs:</span>/mastodon/public/packs\n</span>      -<span class=\"ruby\"> ./public/<span class=\"hljs-symbol\">system:</span>/mastodon/public/system\n</span>\n  streaming:\n    restart: always\n    build: .\n    env_file: .env.production\n    command: npm run start\n    environment:\n      -<span class=\"ruby\"> VIRTUAL_HOST=&lt;your streaming server domain name&gt;\n</span>      -<span class=\"ruby\"> VIRTUAL_PORT=<span class=\"hljs-number\">4000</span>\n</span>      -<span class=\"ruby\"> LETSENCRYPT_HOST=&lt;your streaming server domain name&gt;\n</span>      -<span class=\"ruby\"> LETSENCRYPT_EMAIL=&lt;your email&gt;\n</span>    ports:\n      -<span class=\"ruby\"> <span class=\"hljs-string\">\"4000:4000\"</span>\n</span>    depends_on:\n      -<span class=\"ruby\"> db\n</span>      -<span class=\"ruby\"> redis\n</span></code></pre>\n<h2>Build and start the server</h2>\n<p>We’re almost done!</p>\n<p>Mastodon requires us to do some final setup that needs to be run each time Mastodon is updated or setup for the first time. We’ll setup the database, precompile the assets to be served and actually start our server for the first time.</p>\n<pre><code class=\"language-sh\">docker-compose <span class=\"hljs-keyword\">run</span><span class=\"bash\"> --rm web rails db:migrate\n</span>docker-compose <span class=\"hljs-keyword\">run</span><span class=\"bash\"> --rm web rails assets:precompile\n</span>docker-compose up <span class=\"hljs-comment\"># or docker-compose up --force-recreate if updating Mastodon</span>\n</code></pre>\n<p>This will take some time, but after it finishes you should see a stream of logs from Docker that details the instantiation of each container. Wait about 15 minutes after that starts and you should have access to your Mastodon instance at your domain! Once you’ve confirmed this works, you can exit the logs by typing Ctrl + C and then run your server in the background by running</p>\n<pre><code class=\"language-sh\">docker-compose up <span class=\"hljs-_\">-d</span>\n</code></pre>\n<p>This will prevent your server from being killed whenever you close your terminal.</p>\n<p>If you have the unfortunate case that your server isn’t up and running at your domain, look back over this guide and confirm that all of your configurations are correct. If you don’t see what’s wrong, it’s possible that there’s a problem with this guide or it’s outdated. Look over the <a href=\"https://github.com/tootsuite/mastodon#running-with-docker-and-docker-compose\">Official Mastodon docs</a> and their <a href=\"https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Production-guide.md\">Production Guide</a> and be sure to let me know if you see any problems.</p>\n<h2>Sign up and make an Admin</h2>\n<p>Now you can go to your domain and signup for an account. Once you’ve entered your desired username and password you should receive an email to confirm your account. If you didn’t:</p>\n<ol>\n<li>You didn’t setup SMTP</li>\n<li>SMTP is misconfigured - Check your settings against your SMTP provider and check your logs via <code>docker-compose logs</code> to see if you can find the error</li>\n<li>You’re using something like Google Cloud Platform that blocks SMTP from going out - check your VPS specific guides on how to fix</li>\n</ol>\n<p>In order to confirm your user without an email run:</p>\n<pre><code class=\"language-sh\">docker-compose <span class=\"hljs-keyword\">run</span><span class=\"bash\"> web rails mastodon:confirm_email USER_EMAIL=&lt;your email here&gt;\n</span></code></pre>\n<p>To make yourself an admin, run the following command</p>\n<pre><code class=\"language-sh\">docker-compose <span class=\"hljs-keyword\">run</span><span class=\"bash\"> web rails mastodon:make_admin USERNAME=&lt;your username&gt;\n</span></code></pre>\n<p>Making yourself an admin allows some greater control over your server as well as some additional diagnostics that may help if you’re encountering an error.</p>\n<h2>Single User Mode</h2>\n<p>Final step is to enable Single User Mode. Modify your .env.production file and uncomment this line to enable it</p>\n<pre><code><span class=\"hljs-attr\">SINGLE_USER_MODE</span>=<span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Now any user that visits your server will be automatically sent to your profile and signups will be prevented. Congratulations! You now have a fully functional server!</p>\n<h2>Conclusion</h2>\n<p>Hopefully this was a helpful guide to getting you setup with your own selfhosted Mastodon instance. You can now enjoy totaly prviacy and control over your own account. If you have any feedback or questions, feel free to ping me at <a href=\"mailto:donniewest@social.donniewest.com\">donniewest@social.donniewest.com</a></p>\n<h2>Credits</h2>\n<ul>\n<li><a href=\"https://github.com/tootsuite/documentation\">The official Mastodon docs on Github</a>\n<ul>\n<li>Kudos to Mastodon for the ever-improving documentation</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nolanlawson/resources-for-mastodon-newbies\">Nolan Lawson’s Beginner guide to Mastodon</a>\n<ul>\n<li>This resource guide was indispensable for when I started</li>\n<li>Nolan Laweson is super helpful to beginners, be sure to toot him</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ummjackson/mastodon-guide\">Ummjackson’s Mastodon Guide</a>\n<ul>\n<li>Awesome general purpose and unopinionated guide for getting a Mastodon server up and running</li>\n</ul>\n</li>\n</ul>\n","slug":"setting-up-your-first-mastodon-server","excerpt":"Mastodon is a relatively young social network that aims to be a privacy concious, federated Twitter. Most people opt to join one of the larger servers (tooter.today can help find one if you want) but you and I are not most people. We like our privacy and our self hosted services, so, we’re going to setup a personal Mastodon server that ticks off all the boxes:"},{"layout":"post","title":"Eliminate Boilerplate with React Native Templates","date":"2017-04-17T15:49:41.000Z","comments":true,"categories":[],"content":"<p>At <a href=\"https://codekoalas.com\">Code Koalas</a>, we love React Native. We also <em>hate</em> boilerplate and unfortunately it seems like all of our new React Native projects use the same libraries and the same initial boilerplate. We decided to eliminate that boilerplate with React Native CLI’s new unspoken feature: project templates. With this feature, you too can eliminate boilerplate and speed along the production of your new shiny React Native apps.</p>\n<h2>How to use React Native project templates</h2>\n<p>If you’ve not heard of them before, <a href=\"https://github.com/facebook/react-native/releases/tag/v0.42.3\">React 0.42</a> quietly released a feature that allows a user to specify a template for a newly initialized React Native app and even bundled a template that demonstrated how to build an app with navigation. Even cooler, you can also specify npm packages to create the new app from like so:</p>\n<pre><code>react-native init <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">App</span> --template koality\n</code></pre>\n<p>And I’m going to show you how to build your own.</p>\n<h2>Initialize</h2>\n<p>Unfortunately, the tooling for creating a template compatible with React Native’s cli is nonexistent. The solution we’re going to use here is to leverage the existing architecture around creating a React Native app and change the end product into a template. Let’s start by initializing our React Native project.</p>\n<pre><code>react-native init &lt;your <span class=\"hljs-keyword\">sample</span> <span class=\"hljs-keyword\">app</span> template name here&gt;\n</code></pre>\n<h2>Code</h2>\n<p>Here’s where I leave it up to your imagination. In the case of our team, we created a <a href=\"https://github.com/CodeKoalas/koality-react-native-template\">super basic app template</a> that integrated:</p>\n<ul>\n<li>React Router</li>\n<li>Redux</li>\n<li>Redux persist</li>\n<li>Styled Components</li>\n</ul>\n<p>and other basic bits of boilerplate necessary to start most of our internal projects. I recommend keeping this template fairly minimal so that you don’t spend time replacing libraries or ripping out parts you don’t need and therefore wasting more time than you end up saving.</p>\n<h2>Clean</h2>\n<p>After you’re done coding and the app looks about like you would want, it’s time to actually turn it into a React Native template. Start by modifying your package.json which probably looks like this by now.</p>\n<pre><code>{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"sample\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>,\n  <span class=\"hljs-attr\">\"private\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"node node_modules/react-native/local-cli/cli.js start\"</span>,\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"jest\"</span>\n  },\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"react\"</span>: <span class=\"hljs-string\">\"16.0.0-alpha.6\"</span>,\n    <span class=\"hljs-attr\">\"react-native\"</span>: <span class=\"hljs-string\">\"0.43.3\"</span>,\n    <span class=\"hljs-attr\">\"react-router-native\"</span>: <span class=\"hljs-string\">\"^4.0.0\"</span>,\n    <span class=\"hljs-attr\">\"react-router-redux\"</span>: <span class=\"hljs-string\">\"^4.0.8\"</span>,\n    <span class=\"hljs-attr\">\"redux\"</span>: <span class=\"hljs-string\">\"^3.6.0\"</span>\n  },\n  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n    <span class=\"hljs-attr\">\"babel-jest\"</span>: <span class=\"hljs-string\">\"19.0.0\"</span>,\n    <span class=\"hljs-attr\">\"babel-preset-react-native\"</span>: <span class=\"hljs-string\">\"1.9.1\"</span>,\n    <span class=\"hljs-attr\">\"jest\"</span>: <span class=\"hljs-string\">\"19.0.2\"</span>,\n    <span class=\"hljs-attr\">\"react-test-renderer\"</span>: <span class=\"hljs-string\">\"16.0.0-alpha.6\"</span>\n  },\n  <span class=\"hljs-attr\">\"jest\"</span>: {\n    <span class=\"hljs-attr\">\"preset\"</span>: <span class=\"hljs-string\">\"react-native\"</span>\n  }\n}\n</code></pre>\n<p>Start by creating a dependencies.json file and move your dependencies object from the package.json file to the dependencies.json file</p>\n<pre><code>{\n  <span class=\"hljs-attr\">\"react-router-native\"</span>: <span class=\"hljs-string\">\"^4.0.0\"</span>,\n  <span class=\"hljs-attr\">\"react-router-redux\"</span>: <span class=\"hljs-string\">\"^4.0.8\"</span>,\n  <span class=\"hljs-attr\">\"redux\"</span>: <span class=\"hljs-string\">\"^3.6.0\"</span>\n}\n</code></pre>\n<p>Note: Sadly, react native templates don’t support installing dev dependencies. See the conclusion for a workaround</p>\n<p>From here, it’s time to strip out the entries in the package.json file that are no longer needed. Remove the dependencies, scripts, dev dependencies and anything else you don’t need from the package.json. Finally, rename your template in the format <code>react-native-template-&lt;your name here&gt;</code>. For example, when a user specifies the “sample” template via <code>--template sample</code>, React Native will look for the npm package “react-native-template-sample” instead of the npm package called “sample”</p>\n<pre><code>{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"react-native-template-sample\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"0.0.1\"</span>\n}\n</code></pre>\n<p>Note: Don’t leave behind the dependencies block or anything unneeded in the package.json. React Native’s CLI will ignore the package.json for the generated app and the additional installed depdendencies in your package.json can cause problems. In my case, React Native would install during the template creation and create extra native directories that would fail to compile.</p>\n<p>You also need to delete any directories containing native code that might interfere with your generated app.</p>\n<pre><code><span class=\"hljs-keyword\">rm</span> -rf ./android\n<span class=\"hljs-keyword\">rm</span> -rf ./ios\n</code></pre>\n<p>Project templates also have a nifty feature so that if you put the string <code>HelloWorld</code> in your template anywhere, it’ll get substituted with the project name supplied by the consumer of the template. The biggest place to watch out for this is in the index.ios.js and index.android.js where you register your app by name. Change the registration code to the following in both files:</p>\n<pre><code>...your code here\n\nAppRegistry.registerComponent(<span class=\"hljs-string\">'HelloWorld'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> App);\n</code></pre>\n<p>Be sure to also substitute anywhere else in your template that you use the app name with ‘HelloWorld’</p>\n<h2>Publish</h2>\n<p>You can now test your template by running the following commands</p>\n<pre><code><span class=\"hljs-comment\"># Initialize a new project pointing to the template you just made on your filesystem</span>\nreact-native init test <span class=\"hljs-comment\">--template file://path/to/your/template</span>\ncd test\nreact-native <span class=\"hljs-built_in\">run</span>-android <span class=\"hljs-comment\"># or run-ios if that's your jam</span>\n</code></pre>\n<p>If your app runs successfully, congratulations! It works!</p>\n<p>Now you have a template worthy of publishing. You can put it up on the npm registry for all to use and/or push it up to Github for others to see the source. It’s totally up to you!</p>\n<h2>Conclusion</h2>\n<p>React Native projects typically start off with a lot of chores needed to get up and running. Now with the knowledge of React Native’s project template feature you can remove that boilerplate and get to coding faster.</p>\n<h2>Notes</h2>\n<h3>Caveats with project templates</h3>\n<ul>\n<li>Dev Dependencies: basically have to write a script to initialize your dev dependencies yourself\n<ul>\n<li>We tackled that by stealing a postInstall script from <a href=\"https://github.com/doomsower/react-native-template-starter/blob/f6cd738d8352e53758ce8504f74464f8a407149e/scripts/postInit.js\">react-native-template-starter</a></li>\n<li>See <a href=\"https://github.com/CodeKoalas/koality-react-native-template/blob/master/scripts/setupDevDependencies.js\">our version of the script</a> that can choose between yarn and npm and installs only dev dependencies for you</li>\n</ul>\n</li>\n<li>Incompatibility with other CLI tools, namely haul and create-react-native-app</li>\n<li>Poor documentation, not sure if this will change or get better with time</li>\n</ul>\n<h3>Alternatives</h3>\n<ul>\n<li><a href=\"https://infinite.red/ignite\">Ignite 2.0</a>\n<ul>\n<li>Ignite is a powerful CLI that gives you a lot of control out of the box for generating cool React Native apps</li>\n<li>If you tend to stick with the same stack or end up not needing a lot of Ignite’s stuff, probably worth creating your own template</li>\n<li>If your favorite library isn’t supported, have to still add it every time</li>\n<li>Note: You can simply take the generated Ignite app and strip it down into your own RN template</li>\n</ul>\n</li>\n<li><a href=\"https://codecanyon.net/search?utf8=%E2%9C%93&amp;term=react+native\">Code Canyon</a>, <a href=\"https://strapmobile.com/\">Strap Mobile</a> or other online template stores\n<ul>\n<li>Not OSS</li>\n<li>Unless your app matches their example closely, you’re probably going to make major modifications</li>\n<li>Can’t see what you’re getting until you’ve already purchased it</li>\n</ul>\n</li>\n<li>Hand rolled ala <a href=\"http://yeoman.io/\">Yeoman</a> or Custom script\n<ul>\n<li>You end up writing a lot more code to arrive at the same result</li>\n<li>A lot more error prone</li>\n<li>Infinitely more flexible than any of the options presented</li>\n</ul>\n</li>\n</ul>\n","slug":"eliminate-boilerplate-with-react-native-templates","excerpt":"At Code Koalas, we love React Native. We also hate boilerplate and unfortunately it seems like all of our new React Native projects use the same libraries and the same initial boilerplate. We decided to eliminate that boilerplate with React Native CLI’s new unspoken feature: project templates. With this feature, you too can eliminate boilerplate and speed along the production of your new shiny React Native apps."},{"layout":"post","title":"Setting up VIM for Javascript development","date":"2016-09-05T02:49:41.000Z","comments":true,"categories":[],"content":"<p>For many, VIM is the ultimate text editor and there are many attempts to bring it’s editting prowess to a wide variety of editors. Unfortunately, few understand the power of VIM’s plugin system and the ability to get most of the features of your typical IDE in VIM itself. At the end of this guide, you should have proper autocompletion for your javascript files, jump to definition, linting and syntax checking all from your favorite text editor.There are some prerequisites, however. We assume that you have:</p>\n<p>A. A computer setup with Neovim (a good initial guide on setup can be found <a href=\"http://veelenga.com/editors/how-to-start-using-neovim-instead-of-vim/\">here</a>)\nB. Neovim package installed from python <a href=\"https://github.com/neovim/python-client\">following the guide from here</a>\nC. A recent version of Node (At the time of this guide, Node was at v4.5.0 for LTS and 6.5.0 for current, but anything recent should work)\nD. A basic knowledge of how to configure Neovim</p>\n<p>tl;dr - you can look at the config at the bottom of this post for a minimal drop in configuration for your neovim</p>\n<h2>1. A quick introduction to Vim-Plug</h2>\n<p>If you’ve never handled VIM’s plugin system before it can be quite daunting. Luckily for us, there are a number of projects that make plugin management easy for the typical user. Vim Plug one of the more popular plugin managers that aims to be minimal, universally quick and easy to setup. It also has other more advanced features such as the ability to lazy load plugins until needed, running functions after a plugin installation and more which can be found <a href=\"https://github.com/junegunn/vim-plug\">in it’s documentation</a>. To begin using vim-plug, we’ll first create a basic init.vim in ~/.config/nvim/init.vim that has the following contents</p>\n<pre><code><span class=\"hljs-comment\">\" Install Vim Plug if not installed</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">empty</span>(<span class=\"hljs-built_in\">glob</span>(<span class=\"hljs-string\">'~/.config/nvim/autoload/plug.vim'</span>))\n  <span class=\"hljs-keyword\">silent</span> !curl -fLo ~/.config/nvim/autoload/plug.<span class=\"hljs-keyword\">vim</span> --create-dirs\n    \\ http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/junegunn/<span class=\"hljs-keyword\">vim</span>-plug/master/plug.<span class=\"hljs-keyword\">vim</span>\n  <span class=\"hljs-keyword\">autocmd</span> VimEnter * PlugInstall\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-keyword\">call</span> plug#begin()\n\n\n<span class=\"hljs-keyword\">call</span> plug#end()\n</code></pre>\n<p>This will automatically download and install vim-plug for you on vim launch. Plugins are added in between the calls to <code>plug#begin()</code> and <code>plug#end()</code> and adding github shorthand that looks like <code>Plug 'ternjs/tern_for_vim'</code> which after running <code>:PlugInstall</code> would fetch the vim plugin hosted at <a href=\"https://github.com/ternjs/tern_for_vim\">https://github.com/ternjs/tern_for_vim</a>. We’ll go ahead and add that to our configuration now so our init.vim should look like this:</p>\n<pre><code><span class=\"hljs-comment\">\" Install Vim Plug if not installed</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">empty</span>(<span class=\"hljs-built_in\">glob</span>(<span class=\"hljs-string\">'~/.config/nvim/autoload/plug.vim'</span>))\n  <span class=\"hljs-keyword\">silent</span> !curl -fLo ~/.config/nvim/autoload/plug.<span class=\"hljs-keyword\">vim</span> --create-dirs\n    \\ http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/junegunn/<span class=\"hljs-keyword\">vim</span>-plug/master/plug.<span class=\"hljs-keyword\">vim</span>\n  <span class=\"hljs-keyword\">autocmd</span> VimEnter * PlugInstall\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-keyword\">call</span> plug#begin()\n\nPlug <span class=\"hljs-string\">'ternjs/tern_for_vim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'npm install &amp;&amp; npm install -g tern'</span> }\n\n<span class=\"hljs-keyword\">call</span> plug#end()\n</code></pre>\n<p>You’ll notice that we run some commands here on your computer for you, installing both the vim plugin’s dependencies and a global tern package. This will help keep the plugin in sync with the global ternjs package installed on your computer and is just a hint of the power of vim-plug.</p>\n<h2>2. Deoplete and autocompletion</h2>\n<p>The global tern package is needed because it’s a generic server that all text editors can plug into, which the vim side of things being a client package that communicates with the server. This also allows us to configure the server on both a global scale and on a local scale. For now, we’ll configure it globally in a generic way for maximum benefit. Create a file in your home directory with the name .tern-config with the following contents:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">\"plugins\"</span>: {\n    <span class=\"hljs-attr\">\"node\"</span>: {}\n  }\n}\n</code></pre>\n<p>By default, this assumes ES6 and a few other defaults. It can be configured on a per project basis by adding a .tern-project in the root of the project with the configuration options found at <a href=\"http://ternjs.net/doc/manual.html\">their documention</a>. Now that is setup, you should be able to open vim and run the <code>:PlugInstall</code> command to install your plugin. Then you can go into a javascript project and type <code>&lt;C-x&gt; &lt;C-o&gt;</code> to get completions on your javascript candidates.</p>\n<p>That’s all fine and good, but, this is only scratching the surface of Neovim’s powers. The Omnicompletion method we just set up blocks Neovim and isn’t automatically triggered during typing like we might expect from a full blown IDE. To solve this, we’re going to install Deoplete and some other plugins to get our full IDE abilities turned on. Let’s add these plugins now along with some basic config to get them working. Your config should look like this now:</p>\n<pre><code><span class=\"hljs-comment\">\" Install Vim Plug if not installed</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">empty</span>(<span class=\"hljs-built_in\">glob</span>(<span class=\"hljs-string\">'~/.config/nvim/autoload/plug.vim'</span>))\n  <span class=\"hljs-keyword\">silent</span> !curl -fLo ~/.config/nvim/autoload/plug.<span class=\"hljs-keyword\">vim</span> --create-dirs\n    \\ http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/junegunn/<span class=\"hljs-keyword\">vim</span>-plug/master/plug.<span class=\"hljs-keyword\">vim</span>\n  <span class=\"hljs-keyword\">autocmd</span> VimEnter * PlugInstall\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-keyword\">call</span> plug#begin()\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>! <span class=\"hljs-title\">DoRemote</span><span class=\"hljs-params\">(arg)</span></span>\n  UpdateRemotePlugins\n<span class=\"hljs-keyword\">endfunction</span>\nPlug <span class=\"hljs-string\">'Shougo/deoplete.nvim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">('DoRemote')</span> }</span>\n\nPlug <span class=\"hljs-string\">'ternjs/tern_for_vim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'npm install &amp;&amp; npm install -g tern'</span> }\nPlug <span class=\"hljs-string\">'carlitux/deoplete-ternjs'</span>\n\n\n<span class=\"hljs-keyword\">call</span> plug#end()\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_at_startup = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_ignore_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_smart_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_camel_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_refresh_always = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#max_abbr_width = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#max_menu_width = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#omni#input_patterns = <span class=\"hljs-built_in\">get</span>(<span class=\"hljs-variable\">g:</span>,<span class=\"hljs-string\">'deoplete#omni#input_patterns'</span>,{})\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern_request_timeout</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern_request_timeout</span> = <span class=\"hljs-number\">6000</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern</span>#command = [<span class=\"hljs-string\">\"tern\"</span>]\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern</span>#arguments = [<span class=\"hljs-string\">\"--persistent\"</span>]\n</code></pre>\n<p>Deoplete is a generic autocomplete plugin that allows others to hook into it and provide completions for candidates on screen. It comes preconfigured with file path completion, ctags completion and for strings that appear in each of your vim buffers. deoplete-ternjs is another package that plugs into deoplete that provides completions using the ternjs server. After running <code>:PlugInstall</code> again, you should have a fully installed fuzzy completion engine for vim. You can try it out by typing following a <code>.</code> should trigger autocompletion for whatever object or function you’re calling.</p>\n<p>The other bits of configuration unlock a bit of the power of deoplete. It enables it to start when vim does, enable sane autocompletion based on the cases of your candidates among other things that can be found in the <a href=\"https://github.com/Shougo/deoplete.nvim/blob/master/doc/deoplete.txt\">deoplete docs</a></p>\n<p>But we can still do better. In addition to the candidate completions generated by ternjs, we can also get candidate completion by typescript language services, the same tools used by popular IDEs such as Visual Studio. To do this, we’ll need to add a few more plugins so our init.vim should look like this:</p>\n<pre><code><span class=\"hljs-comment\">\" Install Vim Plug if not installed</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">empty</span>(<span class=\"hljs-built_in\">glob</span>(<span class=\"hljs-string\">'~/.config/nvim/autoload/plug.vim'</span>))\n  <span class=\"hljs-keyword\">silent</span> !curl -fLo ~/.config/nvim/autoload/plug.<span class=\"hljs-keyword\">vim</span> --create-dirs\n    \\ http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/junegunn/<span class=\"hljs-keyword\">vim</span>-plug/master/plug.<span class=\"hljs-keyword\">vim</span>\n  <span class=\"hljs-keyword\">autocmd</span> VimEnter * PlugInstall\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-keyword\">call</span> plug#begin()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>! <span class=\"hljs-title\">DoRemote</span><span class=\"hljs-params\">(arg)</span></span>\n  UpdateRemotePlugins\n<span class=\"hljs-keyword\">endfunction</span>\nPlug <span class=\"hljs-string\">'Shougo/deoplete.nvim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">('DoRemote')</span> }</span>\n\n\n<span class=\"hljs-comment\">\"Javascript Plugins</span>\nPlug <span class=\"hljs-string\">'carlitux/deoplete-ternjs'</span>\nPlug <span class=\"hljs-string\">'ternjs/tern_for_vim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'npm install &amp;&amp; npm install -g tern'</span> }\n\n<span class=\"hljs-comment\">\"Typescript Plugins</span>\nPlug <span class=\"hljs-string\">'Shougo/vimproc.vim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'make'</span> }\nPlug <span class=\"hljs-string\">'Quramy/tsuquyomi'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'npm install -g typescript'</span> }\nPlug <span class=\"hljs-string\">'mhartington/deoplete-typescript'</span>\n\n<span class=\"hljs-keyword\">call</span> plug#end()\n\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_at_startup = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_ignore_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_smart_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_camel_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_refresh_always = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#max_abbr_width = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#max_menu_width = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#omni#input_patterns = <span class=\"hljs-built_in\">get</span>(<span class=\"hljs-variable\">g:</span>,<span class=\"hljs-string\">'deoplete#omni#input_patterns'</span>,{})\n<span class=\"hljs-keyword\">call</span> deoplete#custom#set(<span class=\"hljs-string\">'_'</span>, <span class=\"hljs-string\">'matchers'</span>, [<span class=\"hljs-string\">'matcher_full_fuzzy'</span>])\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern_request_timeout</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern_request_timeout</span> = <span class=\"hljs-number\">6000</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern</span>#command = [<span class=\"hljs-string\">\"tern\"</span>]\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern</span>#arguments = [<span class=\"hljs-string\">\"--persistent\"</span>]\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#sources#tss#javascript_support = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tsuquyomi_javascript_support</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tsuquyomi_auto_open</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tsuquyomi_disable_quickfix</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>This installs two major plugins: Tsuquyomi and deoplete-typescript. Both offer autocompletion based on typescript language services. The difference between them is Tsuquyomi provides some additional IDE features but only provides an omnifunc like tern_for_vim did. deoplete-typescript provides completions like deoplete-ternjs but without the IDE features. I generally like to run this in parallel with ternjs because they seem to offer different sets of completions for my javascript candidates and so fill in the gaps of one another. You should really check out <a href=\"https://github.com/Quramy/tsuquyomi/blob/master/doc/tsuquyomi.txt\">tsuquyomi’s docs</a> to ensure you’re getting the most out of it such as automatic importing, but I won’t go into detail about that here. All you need to know for now is that the typescript server also needs configuration like ternjs did and is configured indepedently of vim. Each project you work on needs a basic config like so:</p>\n<pre><code>{\n  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"ES6\"</span>\n  },\n  <span class=\"hljs-attr\">\"exclude\"</span>: [\n    <span class=\"hljs-string\">\"node_modules\"</span>\n  ]\n}\n</code></pre>\n<p>This will tell the typescript compiler that it’s targeting ES6 and will exclude the node_modules directory for it’s processing. If you’re using Typescript 2.0 (in RC stage at the time of this post) you can easily install typings for some of your libraries by running <code>npm install --save @typings/my_library_here</code> that will be automatically picked up by the compiler and used to provide completions for complex libraries.</p>\n<h2>4. Linting and syntax checking</h2>\n<p>Another major missing feature is automatic linting. On Neovim, we can use neomake. Simply drop into your init.vim with the following configurations to get linting for your favorite tool as long as it is in your path. To enable or disable a linter, just add this line and append or remove the ones you want</p>\n<pre><code><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:neomake_javascript_enabled_makers</span> = [<span class=\"hljs-string\">'eslint'</span>]\n</code></pre>\n<p>For some additional benefits, we’ll run Neomake on every file save and configure the warning signs to our liking:</p>\n<pre><code>autocmd! BufWritePost * Neomake\n<span class=\"hljs-keyword\">let</span> g:neomake_warning_sign = {\n  <span class=\"hljs-string\">\\</span> <span class=\"hljs-string\">'text'</span>: <span class=\"hljs-string\">'?'</span>,\n  <span class=\"hljs-string\">\\</span> <span class=\"hljs-string\">'texthl'</span>: <span class=\"hljs-string\">'WarningMsg'</span>,\n  <span class=\"hljs-string\">\\</span> }\n\n<span class=\"hljs-keyword\">let</span> g:neomake_error_sign = {\n  <span class=\"hljs-string\">\\</span> <span class=\"hljs-string\">'text'</span>: <span class=\"hljs-string\">'X'</span>,\n  <span class=\"hljs-string\">\\</span> <span class=\"hljs-string\">'texthl'</span>: <span class=\"hljs-string\">'ErrorMsg'</span>,\n  <span class=\"hljs-string\">\\</span> }\n</code></pre>\n<p>This will show signs in your vim gutter to show where the syntax and linting errors are for your project.</p>\n<h2>5. CTags</h2>\n<p>Ctags is a tool that outputs a tags file that can then be read by VIM for jumping to definition and other cool tricks. Ctags is pretty universally installable by most OS’s, but traditionally it has had rather poor support for Javascript. We’ll start by installing <a href=\"http://docs.ctags.io/en/latest/\">universal ctags</a> which is simply a fork of the exuberant ctags project with support for the latest version of Javascript. We’ll also install vim-gutentags to enable automatic generation of ctags by VIM upon opening a project. Drop this in your plugins section of your init.vim:</p>\n<pre><code><span class=\"hljs-attribute\">Plug</span> <span class=\"hljs-string\">'ludovicchabant/vim-gutentags'</span>\n</code></pre>\n<p>After running <code>:PlugInstall</code> and opening a project, you should find a tags file in the root of your project. To jump to definition using ctags just hover over a defined variable or import statement and type <code>&lt;C-]&gt;</code>.</p>\n<h2>6. Conclusion</h2>\n<p>This is just scratching the surface of VIM and Neovim’s power and are just the plugins needed to get IDE functionality specific to Javascript. Hopefully this will keep you away from the big bulky IDE that is often used by programmer who feel that VIM is just not enough. The full configuration from this guide can be seen below</p>\n<pre><code><span class=\"hljs-comment\">\" Install Vim Plug if not installed</span>\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">empty</span>(<span class=\"hljs-built_in\">glob</span>(<span class=\"hljs-string\">'~/.config/nvim/autoload/plug.vim'</span>))\n  <span class=\"hljs-keyword\">silent</span> !curl -fLo ~/.config/nvim/autoload/plug.<span class=\"hljs-keyword\">vim</span> --create-dirs\n    \\ http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/junegunn/<span class=\"hljs-keyword\">vim</span>-plug/master/plug.<span class=\"hljs-keyword\">vim</span>\n  <span class=\"hljs-keyword\">autocmd</span> VimEnter * PlugInstall\n<span class=\"hljs-keyword\">endif</span>\n\n<span class=\"hljs-keyword\">call</span> plug#begin()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>! <span class=\"hljs-title\">DoRemote</span><span class=\"hljs-params\">(arg)</span></span>\n  UpdateRemotePlugins\n<span class=\"hljs-keyword\">endfunction</span>\nPlug <span class=\"hljs-string\">'Shougo/deoplete.nvim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">('DoRemote')</span> }</span>\nPlug <span class=\"hljs-string\">'neomake/neomake'</span>, { <span class=\"hljs-string\">'on'</span>: <span class=\"hljs-string\">'Neomake'</span> }\nPlug <span class=\"hljs-string\">'ludovicchabant/vim-gutentags'</span>\n\n\n<span class=\"hljs-comment\">\"Javascript Plugins</span>\nPlug <span class=\"hljs-string\">'pangloss/vim-javascript'</span>\nPlug <span class=\"hljs-string\">'carlitux/deoplete-ternjs'</span>\nPlug <span class=\"hljs-string\">'ternjs/tern_for_vim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'npm install &amp;&amp; npm install -g tern'</span> }\n\n<span class=\"hljs-comment\">\"Typescript Plugins</span>\nPlug <span class=\"hljs-string\">'Shougo/vimproc.vim'</span>, { <span class=\"hljs-string\">'do'</span>: <span class=\"hljs-string\">'make'</span> }\nPlug <span class=\"hljs-string\">'Quramy/tsuquyomi'</span>\nPlug <span class=\"hljs-string\">'mhartington/deoplete-typescript'</span>\n\n<span class=\"hljs-keyword\">call</span> plug#end()\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_at_startup = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_ignore_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_smart_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_camel_case = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#enable_refresh_always = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#max_abbr_width = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#max_menu_width = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#omni#input_patterns = <span class=\"hljs-built_in\">get</span>(<span class=\"hljs-variable\">g:</span>,<span class=\"hljs-string\">'deoplete#omni#input_patterns'</span>,{})\n<span class=\"hljs-keyword\">call</span> deoplete#custom#set(<span class=\"hljs-string\">'_'</span>, <span class=\"hljs-string\">'matchers'</span>, [<span class=\"hljs-string\">'matcher_full_fuzzy'</span>])\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern_request_timeout</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern_request_timeout</span> = <span class=\"hljs-number\">6000</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern</span>#command = [<span class=\"hljs-string\">\"tern\"</span>]\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tern</span>#arguments = [<span class=\"hljs-string\">\"--persistent\"</span>]\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:deoplete</span>#sources#tss#javascript_support = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tsuquyomi_javascript_support</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tsuquyomi_auto_open</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:tsuquyomi_disable_quickfix</span> = <span class=\"hljs-number\">1</span>\n\nautocmd! BufWritePost * Neomake\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:neomake_warning_sign</span> = {\n  \\ <span class=\"hljs-string\">'text'</span>: <span class=\"hljs-string\">'?'</span>,\n  \\ <span class=\"hljs-string\">'texthl'</span>: <span class=\"hljs-string\">'WarningMsg'</span>,\n  \\ }\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">g:neomake_error_sign</span> = {\n  \\ <span class=\"hljs-string\">'text'</span>: <span class=\"hljs-string\">'X'</span>,\n  \\ <span class=\"hljs-string\">'texthl'</span>: <span class=\"hljs-string\">'ErrorMsg'</span>,\n  \\ }\n</code></pre>\n","slug":"setting-up-vim-for-javascript-development","excerpt":"For many, VIM is the ultimate text editor and there are many attempts to bring it’s editting prowess to a wide variety of editors. Unfortunately, few understand the power of VIM’s plugin system and the ability to get most of the features of your typical IDE in VIM itself. At the end of this guide, you should have proper autocompletion for your javascript files, jump to definition, linting and syntax checking all from your favorite text editor."},{"layout":"post","title":"Goals for 2015 and what happened in 2014","date":"2015-01-06T04:17:20.000Z","comments":true,"categories":["Goals","Programming"],"content":"<p>Beginning this year I’m starting an Annual Review - a report of my reflections on the last year and what I plan to do on the year to come. This is a way to hold myself accountable to the world as well as celebrate my successes throughout the year.<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<h2>What went well</h2>\n<p><strong>Finding a Mentor.</strong> Although I believe strongly in self education, I don’t believe learning happens in a bubble. That’s why I sought out someone who already knew how to program in order to teach me how to become an expert programmer. My mentor has helped me see what I don’t know and brought me on a team of professionals to hone my skills. His help is continuing into the new year and it’s pretty awesome.</p>\n<p><strong>Discipline.</strong> In order to make any reasonable amount of progress, you need to have the grit to carry through your goals. It’s been my major weakness and I’m making daily progress. Working on a team has held me accountable to produce work on a regular basis and instill this discipline. My work as become far more regular and less like a rollercoaster of productivity and slothfulness. It’s still something I need to work on, but I still consider it a major victory for 2014.</p>\n<p><strong>Unashamed.</strong> Last year I <a href=\"http://donniewest.com/i-want-to-code/\">publicly declared</a> that I was ashamed of being in fast food and incessantly afraid of failure. This forced me to confront it and realize it’s a major factor that has been holding me back from accomplishing all that I could be. Instead of being ashamed on my job, I forced myself to dwell on the fact that it’s my grit that matters. Instead of being without a degree, I’m debt free. Losing my shame and fear has been a major victory for 2014.</p>\n<h2>What didn’t go well</h2>\n<p><strong>Seinfeld Method.</strong> Last year I had the intent to program daily - any day I did so, I just marked an X on the calendar and sought to not break the chain of X’s. It was an impossible goal: I have a full time job, a wife and 3 kids. I just simply don’t have the time! In many ways though I wasted my time unnecessarily and was not nearly as focused as I could have been. Wasting time has been a major weakness of mine and I need to become more laser focused on my goals.</p>\n<h2>What I’m working toward</h2>\n<p><strong>Job.</strong> I have been programming regularly for almost two years now. Unfortunately, this has mostly resulted in toy projects that aren’t real showcases of my knowledge or private team projects that cannot be shared with the world. It’s time to set aside the toys and become a professional programmer this year, even if it means I have to become an entrepreneur and employ myself.</p>\n<p><strong>Metrics.</strong> While writing this article one of the biggest issues I had was the lack of real numbers on how well I’ve improved over the last year. In 2015 I want to begin quantifying where I am and how I’ve improved over the year. I will learn in the open with at-least-monthly blog posts to showcase that knowledge. Privately, I want to begin tracking my exercise and where my money goes so I can begin those incremental steps toward greatness.</p>\n<p><strong>Family.</strong> As a Christian, husband and father I am the spiritual leader of my home. Through that leadership, I need to build my marriage and my family. This year I plan to begin weekly family devotions and bring my children through a catechism so I know I’m doing my duty as both husband and father.</p>\n<p>While I have little idea of where 2015 will take me, I hope to steer myself toward a year of transformation with these guiding principles. The start of doing things right.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Yep, I stole this format blatently from the wonderful <a href=\"http://jamesclear.com/2014-annual-review\">James Clear</a>. Go check him out. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","slug":"goals-for-2015-and-what-happened-in-2014","excerpt":"Beginning this year I’m starting an Annual Review - a report of my reflections on the last year and what I plan to do on the year to come. This is a way to hold myself accountable to the world as well as celebrate my successes throughout the year."},{"layout":"post","title":"Supercharged VIM built from source","date":"2014-12-27T04:03:10.000Z","comments":true,"categories":["Vim,","Programming"],"content":"<p>There’s a reason programmers love VIM: infinite customization that is consistent across all of your projects. VIM is capable of being molded to your particular tastes and workflow, so why limit oneself with the anemic VIM that’s bundled with your OS? Let’s supercharge our VIM with the latest the text editor has to offer with the language and plugin support that we crave.<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p><em>Note: While I’m sure the following can be adapted to another distro, I assume you’re running a newish version of Ubuntu and is tested against Ubuntu 14.04 and 14.10. The same can be said for RVM - while this guide uses RVM, you should be able to adapt it for an alternative ruby manager</em></p>\n<h2>1. Setting up your Machine</h2>\n<p><strong>Install VIM dependencies</strong></p>\n<p>Here we’re installing the dependencies for a known version of VIM, then install libraries for features it’s lacking and a few build tools along with curl. Removing the system version of VIM will ensure no conflicts arise later. You can replace vim-gnome with vim-nox if you’re not interested in VIM’s GTK integration.</p>\n<pre><code>sudo apt-get build-dep vim-gnome\n\nsudo apt-get install liblua5.1-dev luajit libluajit-5.1 libncurses5-dev mercurial checkinstall curl\n\nsudo apt-get remove vim vim-common gvim vim-runtime \n</code></pre>\n<p><strong>Install RVM</strong><sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup></p>\n<p>You can skip this step if you already have RVM installed, but this should install the latest RVM with the latest version of Ruby.</p>\n<pre><code>gpg --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3\n\n\n\\curl -sSL https://get.rvm.io | bash --ruby\n</code></pre>\n<p><strong>Symlink Correct spots</strong></p>\n<p>When VIM is being compiled, it pulls libruby first from /usr/lib/x86_64-linux-gnu before checking elsewhere. The following is necessary to ensure VIM will use your RVM ruby instead of any system ruby versions that are installed (and also to prevent it from crashing on start).<sup class=\"footnote-ref\"><a href=\"#fn3\" id=\"fnref3\">[3]</a></sup> The part that is awesome here is that the bundled VIM-ruby packages within VIM will now use your RVM ruby and the current gemset.</p>\n<pre><code>ln -s ~/.rvm/rubies/default/lib/libruby.so /usr/lib/x86_64-linux-gnu/libruby.so\nln -s ~/.rvm/rubies/default/lib/libruby.so.2.2 /usr/lib/x86_64-linux-gnu/libruby.so.2.2\n</code></pre>\n<p>Unfortunately, VIM doesn’t detect lua where Ubuntu installs it. Here’s a quick workaround to ensure VIM finds lua correctly. <sup class=\"footnote-ref\"><a href=\"#fn4\" id=\"fnref4\">[4]</a></sup></p>\n<pre><code>sudo mkdir /usr/include/lua5.1/include\nsudo mv /usr/include/lua5.1/*.h /usr/include/lua5.1/include/\n\nsudo ln -s /usr/bin/luajit-2.0.0-beta9 /usr/bin/luajit\n</code></pre>\n<h2>2. Getting the Code</h2>\n<p>VIM is hosted on Google Code using mercurial, so we’ll get the code from there.</p>\n<pre><code>cd ~\nhg clone https://code.google.com/p/vim/\ncd vim\n</code></pre>\n<h2>3. Compiling it</h2>\n<p>Here’s where the magic happens. If there’s anything missing from above, you should get a quick failure so you’re not missing out on anything. Checkinstall also gives us the added benefit of removing VIM with apt-get.</p>\n<pre><code>./configure --with-features=huge \\\n            --enable-rubyinterp \\\n            --with-ruby-command=$HOME/.rvm/rubies/default/bin/ruby \\\n            --enable-pythoninterp \\\n            --enable-perlinterp \\\n            --enable-luainterp \\\n            --with-lua-prefix=/usr/include/lua5.1 \\\n            --with-luajit \\\n            --enable-cscope \\\n            --prefix=/usr \\\n            --enable-largefile \\\n            --with-x \\\n            --enable-fontset \\\n            --enable-multibyte \\\n            --enable-gui=auto \\\n            --disable-netbeans \\\n            --enable-fail-if-missing\n\nmake VIMRUNTIMEDIR=/usr/share/vim/vim74\nsudo checkinstall\n</code></pre>\n<h2>4. Set it as Default</h2>\n<p>Set it as your default editor and default VIM</p>\n<pre><code>sudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1\nsudo update-alternatives --set editor /usr/bin/vim\nsudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim 1\nsudo update-alternatives --set vi /usr/bin/vim\n</code></pre>\n<h2>5. Conclusion</h2>\n<p>Now you can enjoy supercharged VIM - the full language and plugin support that it offers with the added benefit of using the latest ruby available on your system.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Most of the credit to this guide belongs to <a href=\"https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source\">YouCompleteMe’s Wiki</a> and <a href=\"https://gist.github.com/jdewit/9818870\">this gist</a>. I mainly just merged instructions from the two and worked out kinks <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Up to date instructions at <a href=\"https://rvm.io/rvm/install\">RVM’s website</a> <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn3\" class=\"footnote-item\"><p>If you want a different Ruby than 2.2, just symlink the appropriate libruby version and set it as default in RVM <a href=\"#fnref3\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn4\" class=\"footnote-item\"><p>Ubuntu 14.10 and up bundle Lua 5.2, however, Luajit isn’t supported and Lua 5.1 seems to work just fine for my purposes and allows this guide to have <em>some</em> backwards compatibility. <a href=\"#fnref4\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","slug":"supercharged-vim-built-from-source","excerpt":"There’s a reason programmers love VIM: infinite customization that is consistent across all of your projects. VIM is capable of being molded to your particular tastes and workflow, so why limit oneself with the anemic VIM that’s bundled with your OS? Let’s supercharge our VIM with the latest the text editor has to offer with the language and plugin support that we crave.[1]\nNote: While I’m sure the following can be adapted to another distro, I assume you’re running a newish version of Ubuntu and is tested against Ubuntu 14.04 and 14.10. The same can be said for RVM - while this guide uses RVM, you should be able to adapt it for an alternative ruby manager"},{"layout":"post","title":"I want to Code","date":"2014-01-04T06:04:00.000Z","comments":true,"categories":["Goals","Programming"],"content":"<p>My name is Donnie West. I work in fast food and I am teaching myself how to code. I’m doing it not only to become more valuable as a member of the workforce, but also to instill in myself qualities I lack.</p>\n<h2>I am utterly undisciplined</h2>\n<p>Programming is a discipline where one learns to communicate clearly one’s intentions to both a computer and fellow human beings; that is, the communication must be concise and logical. This is precisely why I find programming so appealing. It is the craft of the digital age, a skill to be honed over one’s lifetime and built upon.</p>\n<p>I’ve been told my entire life that I’m a very intelligent individual, but it’s incredible that people ignore the most <strong>damning</strong> characteristic about me: I’m lazy. I lack the grit that’s so necessary to carry out any semblance of success in my life and all the while have been praised about it.</p>\n<blockquote>\n<p>Intelligence without amibition is a bird without wings\n– <cite>Salvador Dalí</cite></p>\n</blockquote>\n<p>Programming will be my means of instilling this discipline within me.</p>\n<h2>I’m afraid of Failure</h2>\n<p>Programming <a href=\"https://medium.com/tech-talk/b4c8a249e70f\"><em>is failure</em></a>. If you don’t fail constantly you’re simply not challenging yourself enough. If you are a beginner at <em>anything</em> you should expect to fail often. In fact, we’ve found that for any given skill it’s best to <a href=\"http://jamesclear.com/repetitions\">iterate quickly as opposed to making it perfect.</a></p>\n<p>Unfortunately, I have a mean perfectionist streak. It means I procrastinate on projects I don’t know how to do. I spend endless amounts of time on tiny details. It means I don’t allow myself to fail. Which is why my fear of failure is destructive to me: it holds me back from progress. It’s a large part of my lack of discipline. I lack the self control to get up from my failures and try again. That’s the horrifying part of fearing failure. <em>When you fear failure, you only fail more.</em></p>\n<h2>I’m ashamed of where I am</h2>\n<p>For some time I’ve been haunted by the fact that I dropped out of college and lack a clear path to future success. I’ve carried a mental burden that I won’t amount to anything because I work in fast food and don’t have a degree. Therefore, I not only work at the most stereotypical place for a non-college graduate to work but also my friends have begun graduating.\nAnd it’s all sheer folly.</p>\n<ul>\n<li>I’ve avoided crushing debt</li>\n</ul>\n<p>The average Missouri college graduate (where I live) leaves school with <a href=\"http://projectonstudentdebt.org/state_by_state-view2013.php?area=MO\">$23,030 in debt</a>. It would be different if college degrees are worth it, but increasingly we’re seeing <a href=\"http://www.sfgate.com/education/article/Is-college-worth-the-cost-Study-casts-doubt-4500844.php\">they’re not.</a> We’re finding that there are alternatives that are worthy of pursuit. For me the alternative is self education.</p>\n<ul>\n<li>My value is not determined by a degree</li>\n</ul>\n<blockquote>\n<p>“I don’t care if you work for McDonald’s. […] If you show up early, if you stay late, if you volunteer for the hard stuff, you’re going run that organization.”\n– <cite> Mike Rowe <a href=\"http://foxnewsinsider.com/2013/08/04/mike-rowe-dirty-jobs-alternative-college-degree\">Fox News Interview</a></cite></p>\n</blockquote>\n<p>My value is determined by the grit I wish to instill in myself.</p>\n<ul>\n<li>I provide for my family</li>\n</ul>\n<p>I work a full time job and I can afford to pay the bills and pay my rent with a little to save at the end of it all. It’s not much, but ultimately that’s what matters in my relationship to my job - that my family is provided for - as opposed to the frills or esteem of a higher paying job. I should still always strive for better but I don’t <em>have</em> to.</p>\n<p>I will put a stop to the shame. I will stop feeling sorry for where I am in life and then act to change it.</p>\n<h2>What I’m going to do about it</h2>\n<p>I have an immense difficulty doing something for such a long term. I lack the grit necessary to stick to my goals. I will change that.</p>\n<ul>\n<li>I’ve begun using the <a href=\"http://jamesclear.com/stop-procrastinating-seinfeld-strategy\">Seinfeld Method</a> to ensure I code each day.</li>\n<li>I’m going to seek out a mentor to guide me through my self education.</li>\n</ul>\n<p>Through these, I will become disciplined by consistent practice, rid myself of my fear of failure by iterating quickly and stop being ashamed.</p>\n<p>So. What’s stopping <strong>you</strong> from doing the same?</p>\n","slug":"i-want-to-code","excerpt":"My name is Donnie West. I work in fast food and I am teaching myself how to code. I’m doing it not only to become more valuable as a member of the workforce, but also to instill in myself qualities I lack.\nI am utterly undisciplined\nProgramming is a discipline where one learns to communicate clearly one’s intentions to both a computer and fellow human beings; that is, the communication must be concise and logical. This is precisely why I find programming so appealing. It is the craft of the digital age, a skill to be honed over one’s lifetime and built upon."}]